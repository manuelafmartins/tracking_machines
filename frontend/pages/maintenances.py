import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import requests
from frontend.utils.api import get_api_data
from frontend.utils.auth import is_admin
from utils.ui import display_menu, show_delete_button
from utils.auth import login_user, logout_user, is_admin
from utils.image import get_image_base64, save_company_logo
from utils.api import get_api_data, post_api_data, put_api_data, delete_api_data
import os
from dotenv import load_dotenv

def show_maintenances():
    st.title("Agendamento de Manuten√ß√µes")
    
    # Buscar dados com base no papel do usu√°rio
    if is_admin():
        companies = get_api_data("companies") or []
        # Buscar todas as m√°quinas inicialmente
        all_machines = get_api_data("machines") or []
    else:
        company_id = st.session_state.get("company_id")
        if company_id:
            companies = [get_api_data(f"companies/{company_id}")] if get_api_data(f"companies/{company_id}") else []
            all_machines = get_api_data(f"machines/company/{company_id}") or []
        else:
            companies = []
            all_machines = []
    
    # Criar um dicion√°rio para busca r√°pida de nomes de empresas
    company_dict = {c["id"]: c["name"] for c in companies}
    
    # Criar um formul√°rio para agendar nova manuten√ß√£o
    with st.form("new_maintenance"):
        st.subheader("Agendar Nova Manuten√ß√£o")
        
        # Filtro de empresa (apenas para admin)
        if is_admin() and companies:
            company_options = [c["id"] for c in companies]
            company_labels = [c["name"] for c in companies]
            
            selected_company_idx = st.selectbox(
                "Filtrar por Empresa",
                options=range(len(company_options)),
                format_func=lambda idx: company_labels[idx],
                key="company_filter"
            )
            selected_company_id = company_options[selected_company_idx]
            
            # Filtrar m√°quinas pela empresa selecionada
            machines = [m for m in all_machines if m["company_id"] == selected_company_id]
        else:
            # Gestores de frota veem apenas as m√°quinas de sua empresa
            machines = all_machines
        
        # Deixar o usu√°rio escolher uma m√°quina
        if machines:
            machine_options = [m["id"] for m in machines]
            machine_labels = [f"{m['name']} ({m['type']})" for m in machines]
            
            selected_machine_idx = st.selectbox(
                "M√°quina",
                options=range(len(machine_options)),
                format_func=lambda idx: machine_labels[idx]
            )
            chosen_machine_id = machine_options[selected_machine_idx]
        else:
            st.warning("N√£o h√° m√°quinas dispon√≠veis. Por favor, adicione uma m√°quina primeiro.")
            chosen_machine_id = None
        
        # Tipos de manuten√ß√£o
        maintenance_type = st.selectbox(
            "Tipo de Manuten√ß√£o",
            ["Troca de √ìleo", "Revis√£o Completa", "Filtros", "Pneus", "Manuten√ß√£o Preventiva", "Manuten√ß√£o Corretiva", "Outro"]
        )
        
        final_type = maintenance_type
        if maintenance_type == "Outro":
            user_type = st.text_input("Especifique o tipo de manuten√ß√£o")
            if user_type:
                final_type = user_type
        
        # Sele√ß√£o de data
        scheduled_date = st.date_input(
            "Data Agendada",
            min_value=datetime.now().date(),
            value=datetime.now().date() + timedelta(days=7)
        )
        
        # Notas opcionais
        notes = st.text_area("Observa√ß√µes (Opcional)")
        
        submitted = st.form_submit_button("Agendar")
        
        if submitted and chosen_machine_id:
            # De acordo com MaintenanceCreate, enviamos: {"machine_id", "type", "scheduled_date", "notes"}
            data = {
                "machine_id": chosen_machine_id,
                "type": final_type,
                "scheduled_date": scheduled_date.isoformat()
            }
            if notes:
                data["notes"] = notes
                
            if post_api_data("maintenances", data):
                st.success(f"Manuten√ß√£o agendada para {scheduled_date}!")
                st.rerun()
    
    st.subheader("Manuten√ß√µes Agendadas")
    
    # Buscar manuten√ß√µes com base no papel do usu√°rio
    if is_admin():
        maintenances = get_api_data("maintenances") or []
    else:
        company_id = st.session_state.get("company_id")
        if company_id:
            maintenances = get_api_data(f"maintenances/company/{company_id}") or []
        else:
            maintenances = []
    
    if maintenances:
        # Adicionar nome da m√°quina para melhor exibi√ß√£o
        for m in maintenances:
            machine = next((mac for mac in all_machines if mac["id"] == m["machine_id"]), None)
            if machine:
                m["machine_name"] = machine["name"]
                m["machine_type"] = machine["type"]
                
                # Adicionar nome da empresa
                company_id = machine.get("company_id")
                if company_id in company_dict:
                    m["company_name"] = company_dict[company_id]
        
        # Converter para DataFrame para exibi√ß√£o
        df_maint = pd.DataFrame(maintenances)
        
        # Converter "scheduled_date" para datetime
        if "scheduled_date" in df_maint.columns:
            df_maint["scheduled_date"] = pd.to_datetime(df_maint["scheduled_date"])
        
        # Ordenar por data
        if "scheduled_date" in df_maint.columns:
            df_maint = df_maint.sort_values("scheduled_date")
        
        # Destaque simples para atrasadas / em breve
        today = datetime.now().date()
        
        # Exibir manuten√ß√µes em abas: Pendentes e Conclu√≠das
        tab1, tab2 = st.tabs(["Pendentes", "Conclu√≠das"])
        
        with tab1:
            # Filtrar para manuten√ß√µes pendentes
            pending = df_maint[df_maint["completed"] == False] if "completed" in df_maint.columns else df_maint
            
            if not pending.empty:
                for idx, maint in pending.iterrows():
                    # Determinar urg√™ncia para codifica√ß√£o de cores
                    date_val = maint["scheduled_date"].date() if "scheduled_date" in maint else today
                    days_remaining = (date_val - today).days
                    
                    if days_remaining <= 0:
                        status = "‚ö†Ô∏è Atrasada"
                    elif days_remaining <= 2:
                        status = "üî¥ Urgente"
                    elif days_remaining <= 7:
                        status = "‚ö° Em Breve"
                    else:
                        status = "‚úì Agendada"
                    
                    # Criar um expansor com detalhes da manuten√ß√£o
                    with st.expander(f"{status} - {maint.get('type', 'Manuten√ß√£o')} em {maint.get('machine_name', 'M√°quina Desconhecida')} ({date_val})"):
                        col1, col2 = st.columns([3, 1])
                        
                        with col1:
                            st.write(f"**M√°quina:** {maint.get('machine_name', 'Desconhecida')}")
                            st.write(f"**Empresa:** {maint.get('company_name', 'Desconhecida')}")
                            st.write(f"**Tipo:** {maint.get('type', 'Desconhecido')}")
                            st.write(f"**Data Agendada:** {date_val}")
                            
                            if "notes" in maint and maint["notes"]:
                                st.write(f"**Observa√ß√µes:** {maint['notes']}")
                        
                        with col2:
                            # Bot√£o para marcar como conclu√≠da
                            if st.button("Marcar como Conclu√≠da", key=f"complete_{maint['id']}"):
                                if put_api_data(f"maintenances/{maint['id']}", {"completed": True}):
                                    st.success("Manuten√ß√£o marcada como conclu√≠da!")
                                    st.rerun()
                            
                            # Bot√£o de edi√ß√£o
                            if st.button("Editar", key=f"edit_maint_{maint['id']}"):
                                st.session_state["edit_maint_id"] = maint["id"]
                                st.session_state["edit_maint_type"] = maint["type"]
                                st.session_state["edit_maint_date"] = maint["scheduled_date"]
                                st.session_state["edit_maint_notes"] = maint.get("notes", "")
                            
                            # Bot√£o de exclus√£o
                            show_delete_button("maintenance", maint["id"], label="Excluir", 
                                              confirm_text=f"Tem certeza que deseja excluir esta manuten√ß√£o?")
                    
                    # Formul√°rio de edi√ß√£o aparece se esta manuten√ß√£o estiver sendo editada
                    if st.session_state.get("edit_maint_id") == maint["id"]:
                        with st.form(f"edit_maint_{maint['id']}"):
                            st.subheader(f"Editar Manuten√ß√£o")
                            
                            edit_type = st.text_input("Tipo de Manuten√ß√£o", value=st.session_state["edit_maint_type"])
                            
                            edit_date = st.date_input(
                                "Data Agendada",
                                value=st.session_state["edit_maint_date"].date() 
                                    if isinstance(st.session_state["edit_maint_date"], datetime) 
                                    else datetime.strptime(st.session_state["edit_maint_date"], "%Y-%m-%d").date(),
                                min_value=datetime.now().date()
                            )
                            
                            edit_notes = st.text_area("Observa√ß√µes", value=st.session_state["edit_maint_notes"])
                            
                            # Criar novas colunas dentro do formul√°rio
                            col1, col2 = st.columns(2)
                            with col1:
                                submit_edit = st.form_submit_button("Salvar Altera√ß√µes")
                            with col2:
                                cancel_edit = st.form_submit_button("Cancelar")
                            
                            if submit_edit and edit_type:
                                update_data = {
                                    "type": edit_type,
                                    "scheduled_date": edit_date.isoformat(),
                                    "notes": edit_notes
                                }
                                
                                if put_api_data(f"maintenances/{maint['id']}", update_data):
                                    st.success("Manuten√ß√£o atualizada com sucesso!")
                                    # Limpar estado de edi√ß√£o
                                    if "edit_maint_id" in st.session_state:
                                        del st.session_state["edit_maint_id"]
                                    st.rerun()
                            
                            if cancel_edit:
                                # Limpar estado de edi√ß√£o
                                if "edit_maint_id" in st.session_state:
                                    del st.session_state["edit_maint_id"]
                                st.rerun()
            else:
                st.info("N√£o h√° manuten√ß√µes pendentes.")
        
        with tab2:
            # Filtrar para manuten√ß√µes conclu√≠das
            completed = df_maint[df_maint["completed"] == True] if "completed" in df_maint.columns else pd.DataFrame()
            
            if not completed.empty:
                # Renomear colunas para exibi√ß√£o em portugu√™s
                column_mapping = {
                    "scheduled_date": "Data Agendada",
                    "type": "Tipo",
                    "machine_name": "M√°quina",
                    "company_name": "Empresa"
                }
                
                display_df = completed[["scheduled_date", "type", "machine_name", "company_name"]].rename(columns=column_mapping)
                st.dataframe(display_df)
            else:
                st.info("N√£o h√° manuten√ß√µes conclu√≠das.")
    else:
        st.info("N√£o h√° manuten√ß√µes agendadas.")